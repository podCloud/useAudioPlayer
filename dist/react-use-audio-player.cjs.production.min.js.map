{"version":3,"file":"react-use-audio-player.cjs.production.min.js","sources":["../src/audioPlayerState.ts","../src/context.ts","../src/useAudioPlayer.ts","../src/AudioPlayerProvider.tsx","../src/useAudioPosition.ts"],"sourcesContent":["export enum Actions {\n    START_LOAD,\n    ON_LOAD,\n    ON_PLAY,\n    ON_END,\n    ON_PAUSE,\n    ON_STOP,\n    ON_PLAY_ERROR,\n    ON_LOAD_ERROR\n}\n\ninterface BaseAction {\n    type: Actions\n}\n\ninterface ErrorAction extends BaseAction {\n    error: Error\n}\n\ninterface LoadAction extends BaseAction {\n    duration: number\n}\n\ntype Action = BaseAction | ErrorAction | LoadAction\n\nexport interface AudioPlayerState {\n    loading: boolean\n    playing: boolean\n    stopped: boolean\n    error: Error | null\n    duration: number\n    ready: boolean\n}\n\nexport const initialState: AudioPlayerState = {\n    loading: true,\n    playing: false,\n    stopped: true,\n    error: null,\n    duration: 0,\n    ready: false\n}\n\nexport function reducer(state: AudioPlayerState, action: Action) {\n    switch (action.type) {\n        case Actions.START_LOAD:\n            return {\n                ...state,\n                loading: true,\n                stopped: true,\n                ready: false,\n                error: null,\n                duration: 0\n            }\n        case Actions.ON_LOAD:\n            return {\n                ...state,\n                loading: false,\n                duration: (action as LoadAction).duration,\n                ready: true\n            }\n        case Actions.ON_PLAY:\n            return {\n                ...state,\n                playing: true,\n                stopped: false\n            }\n        case Actions.ON_STOP:\n        case Actions.ON_END:\n            return {\n                ...state,\n                stopped: true,\n                playing: false\n            }\n        case Actions.ON_PAUSE:\n            return {\n                ...state,\n                playing: false\n            }\n        case Actions.ON_PLAY_ERROR:\n            return {\n                ...state,\n                playing: false,\n                stopped: true,\n                error: (action as ErrorAction).error\n            }\n        case Actions.ON_LOAD_ERROR:\n            return {\n                ...state,\n                playing: false,\n                stopped: true,\n                loading: false,\n                error: (action as ErrorAction).error\n            }\n        default:\n            return state\n    }\n}\n","import React from \"react\"\nimport { AudioPlayer } from \"./types\"\n\nexport const AudioPlayerContext = React.createContext<AudioPlayer | null>(null)\n","import { useCallback, useContext, useEffect } from \"react\"\nimport { AudioPlayerContext } from \"./context\"\nimport { AudioPlayer, AudioSrcProps } from \"./types\"\n\nconst noop = () => {}\n\nexport type AudioPlayerControls = Omit<AudioPlayer, \"player\"> & {\n    play: Howl[\"play\"] | typeof noop\n    pause: Howl[\"pause\"] | typeof noop\n    stop: Howl[\"stop\"] | typeof noop\n    mute: Howl[\"mute\"] | typeof noop\n    seek: Howl[\"seek\"] | typeof noop\n    volume: Howl[\"volume\"] | typeof noop\n    togglePlayPause: () => void\n}\n\nexport const useAudioPlayer = (props?: AudioSrcProps): AudioPlayerControls => {\n    const { player, load, ...context } = useContext(AudioPlayerContext)!\n\n    const { src, format, autoplay } = props || {}\n\n    useEffect(() => {\n        // if useAudioPlayer is called without arguments\n        // don't do anything: the user will have access\n        // to the current context\n        if (!src) return\n        load({ src, format, autoplay })\n    }, [src, format, autoplay, load])\n\n    const togglePlayPause = useCallback(() => {\n        if (!player) return\n\n        if (player.playing()) {\n            player.pause()\n        } else {\n            player.play()\n        }\n    }, [player])\n\n    return {\n        ...context,\n        play: player ? player.play.bind(player) : noop,\n        pause: player ? player.pause.bind(player) : noop,\n        stop: player ? player.stop.bind(player) : noop,\n        mute: player ? player.mute.bind(player) : noop,\n        seek: player ? player.seek.bind(player) : noop,\n        volume: player ? player.volume.bind(player) : noop,\n        load,\n        togglePlayPause\n    }\n}\n","import React, {\n    useState,\n    useCallback,\n    useEffect,\n    useRef,\n    useReducer,\n    useMemo\n} from \"react\"\nimport { Howl } from \"howler\"\nimport { initialState, reducer, Actions } from \"./audioPlayerState\"\nimport { AudioPlayerContext } from \"./context\"\nimport { AudioPlayer, AudioSrcProps } from \"./types\"\n\ninterface AudioPlayerProviderProps {\n    children: React.ReactNode\n    value?: AudioPlayer\n}\n\nexport function AudioPlayerProvider({\n    children,\n    value\n}: AudioPlayerProviderProps) {\n    const [player, setPlayer] = useState<Howl | null>(null)\n    const [\n        { loading, error, playing, stopped, duration, ready },\n        dispatch\n    ] = useReducer(reducer, initialState)\n\n    const playerRef = useRef<Howl>()\n\n    const constructHowl = useCallback(\n        ({ src, format, autoplay, ...howlOpts }: AudioSrcProps): Howl => {\n            return new Howl({\n                src,\n                format,\n                autoplay,\n                ...howlOpts\n            })\n        },\n        []\n    )\n\n    const load = useCallback(\n        ({ src, format, autoplay = false, ...howlOpts }: AudioSrcProps) => {\n            dispatch({ type: Actions.START_LOAD })\n\n            let wasPlaying = false\n            if (playerRef.current) {\n                // don't do anything if we're asked to reload the same source\n                // @ts-ignore the _src argument actually exists\n                if (playerRef.current._src === src) return\n                wasPlaying = playerRef.current.playing()\n                if (wasPlaying) {\n                    playerRef.current.stop()\n                    // remove event handlers from player that is about to be replaced\n                    playerRef.current.off()\n                    playerRef.current = undefined\n                }\n            }\n\n            // create a new player\n            const howl = constructHowl({\n                src,\n                format,\n                autoplay: wasPlaying || autoplay, // continues playing next song\n                ...howlOpts\n            })\n\n            // if this howl has already been loaded (cached) then fire the load action\n            // @ts-ignore _state exists\n            if (howl._state === \"loaded\") {\n                dispatch({ type: Actions.ON_LOAD, duration: howl.duration() })\n            }\n\n            howl.on(\n                \"load\",\n                () =>\n                    void dispatch({\n                        type: Actions.ON_LOAD,\n                        duration: howl.duration()\n                    })\n            )\n            howl.on(\"play\", () => void dispatch({ type: Actions.ON_PLAY }))\n            howl.on(\"end\", () => void dispatch({ type: Actions.ON_END }))\n            howl.on(\"pause\", () => void dispatch({ type: Actions.ON_PAUSE }))\n            howl.on(\"stop\", () => void dispatch({ type: Actions.ON_STOP }))\n            howl.on(\"playerror\", (_id, error) => {\n                dispatch({\n                    type: Actions.ON_PLAY_ERROR,\n                    error: new Error(\"[Play error] \" + error)\n                })\n            })\n            howl.on(\"loaderror\", (_id, error) => {\n                dispatch({\n                    type: Actions.ON_LOAD_ERROR,\n                    error: new Error(\"[Load error] \" + error)\n                })\n            })\n\n            setPlayer(howl)\n            playerRef.current = howl\n        },\n        [constructHowl]\n    )\n\n    useEffect(() => {\n        // unload the player on unmount\n        return () => {\n            if (playerRef.current) playerRef.current.unload()\n        }\n    }, [])\n\n    const contextValue: AudioPlayer = useMemo(() => {\n        return value\n            ? value\n            : {\n                  player,\n                  load,\n                  error,\n                  loading,\n                  playing,\n                  stopped,\n                  ready,\n                  duration\n              }\n    }, [loading, error, playing, stopped, load, value, player, ready, duration])\n\n    return (\n        <AudioPlayerContext.Provider value={contextValue}>\n            {children}\n        </AudioPlayerContext.Provider>\n    )\n}\n","import { useContext, useEffect, useLayoutEffect, useRef, useState } from \"react\"\nimport { AudioPlayerContext } from \"./context\"\nimport { useAudioPlayer, AudioPlayerControls } from \"./useAudioPlayer\"\n\ninterface UseAudioPositionConfig {\n    highRefreshRate?: boolean\n}\n\ninterface AudioPosition {\n    position: number\n    duration: number\n    seek: AudioPlayerControls[\"seek\"]\n}\n\n// gives current audio position state - updates in an animation frame loop for animating audio visualizations\nexport const useAudioPosition = (\n    config: UseAudioPositionConfig = {}\n): AudioPosition => {\n    const { highRefreshRate = false } = config\n    const { player, playing, stopped, duration } = useContext(\n        AudioPlayerContext\n    )!\n\n    const { seek } = useAudioPlayer()\n    const [position, setPosition] = useState(0)\n    const animationFrameRef = useRef<number>()\n\n    // sets position on player initialization and when the audio is stopped\n    useEffect(() => {\n        if (player) {\n            setPosition(player.seek() as number)\n        }\n    }, [player, stopped])\n\n    // updates position on a one second loop for low refresh rate default setting\n    useEffect(() => {\n        let timeout: number\n        if (!highRefreshRate && player && playing)\n            timeout = window.setInterval(\n                () => setPosition(player.seek() as number),\n                1000\n            )\n        return () => clearTimeout(timeout)\n    }, [highRefreshRate, player, playing])\n\n    // updates position on a 60fps loop for high refresh rate setting\n    useLayoutEffect(() => {\n        const animate = () => {\n            setPosition(player?.seek() as number)\n            animationFrameRef.current = requestAnimationFrame(animate)\n        }\n\n        // kick off a new animation cycle when the player is defined and starts playing\n        if (highRefreshRate && player && playing) {\n            animationFrameRef.current = requestAnimationFrame(animate)\n        }\n\n        return () => {\n            if (animationFrameRef.current) {\n                cancelAnimationFrame(animationFrameRef.current)\n            }\n        }\n    }, [highRefreshRate, player, playing])\n\n    return { position, duration, seek }\n}\n"],"names":["Actions","initialState","loading","playing","stopped","error","duration","ready","reducer","state","action","type","START_LOAD","ON_LOAD","ON_PLAY","ON_STOP","ON_END","ON_PAUSE","ON_PLAY_ERROR","ON_LOAD_ERROR","AudioPlayerContext","React","createContext","noop","useAudioPlayer","props","useContext","player","load","context","src","format","autoplay","useEffect","togglePlayPause","useCallback","pause","play","bind","stop","mute","seek","volume","children","value","useState","setPlayer","useReducer","dispatch","playerRef","useRef","constructHowl","howlOpts","Howl","wasPlaying","current","_src","off","undefined","howl","_state","on","_id","Error","unload","contextValue","useMemo","Provider","config","highRefreshRate","position","setPosition","animationFrameRef","timeout","window","setInterval","clearTimeout","useLayoutEffect","requestAnimationFrame","animate","cancelAnimationFrame"],"mappings":"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"}